using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using RSSCargo.BLL.Services.Contracts;
using RSSCargo.BLL.Services.Email;
using RSSCargo.DAL.Models;
using RSSCargo.PL.Models;

namespace RSSCargo.PL.Controllers;

[AllowAnonymous]
public class AccountController : Controller
{
    private readonly ILogger<AccountController> _logger;
    private readonly SignInManager<User> _signInManager;
    private readonly IUserService _userService;
    private readonly IEmailSender _emailSender;

    public AccountController(ILogger<AccountController> logger, IUserService userService,
        SignInManager<User> signInManager, IEmailSender emailSender)
    {
        _logger = logger;
        _userService = userService;
        _signInManager = signInManager;
        _emailSender = emailSender;
    }

    [HttpGet]
    public IActionResult SignIn(string returnUrl)
    {
        ViewData["ReturnUrl"] = returnUrl;
        return View();
    }

    public IActionResult Login()
    {
        return RedirectToAction("SignIn");
    }
    
    [HttpPost]
    public async Task<IActionResult> SignIn(SignInViewModel model, string? returnUrl)
    {
        if (!ModelState.IsValid) return View("SignIn", model);

        var user = _userService.GetUserByEmail(model.Email);
        if (user == null)
        {
            ModelState.AddModelError("EmailPassword", "* Invalid email address or password.");
            return View("SignIn", model);
        }

        var result = await _signInManager.PasswordSignInAsync(user.UserName, model.Password, true, false);
        if (!result.Succeeded)
        {
            ModelState.AddModelError("EmailPassword", "* Invalid email address or password.");
            return View("SignIn", model);
        }

        _userService.UserAuthenticated(HttpContext, user.Id, user.UserName);

        return LocalRedirect(returnUrl ?? "/Rss/Feeds");
    }
    [HttpGet]
    public IActionResult SignUp(string returnUrl)
    {
        ViewData["ReturnUrl"] = returnUrl;
        return View();
    }
    
    [HttpPost]
    public async Task<IActionResult> SignUp(SignUpViewModel model)
    {
        if (!ModelState.IsValid) return View("SignUp", model);
        if (model.Password != model.ConfirmPassword)
        {
            ModelState.AddModelError("ConfirmPassword", "* Passwords do not match.");
            return View("SignUp", model);
        }
        
        var emailExists = await _signInManager.UserManager.FindByEmailAsync(model.Email);
        if (emailExists != null)
        {
            ModelState.AddModelError("Email", "* Email already exists.");
            return View("SignUp", model);
        }

        var usernameExists = await _signInManager.UserManager.FindByNameAsync(model.Username);
        if (usernameExists != null)
        {
            ModelState.AddModelError("Username", "* Username already exists.");
            return View("SignUp", model);
        }

        var user = new User
        {
            Email = model.Email,
            UserName = model.Username,
        };

        var result = await _signInManager.UserManager.CreateAsync(user, model.Password);
        if (result.Succeeded)
        {
            var token = await _signInManager.UserManager.GenerateEmailConfirmationTokenAsync(user);
            _logger.LogInformation("Email Confirmation token generated by UserManager");
            var confirmationLink = Url.Action("ConfirmEmail", "Account", new { token, email = user.Email }, Request.Scheme)!;
            _logger.LogInformation("Confirmation link created");
            var message = new Message(new string[] { user.Email }, "Confirmation email link", confirmationLink, null!);
            _logger.LogInformation("Message formed");

            await _emailSender.SendEmailAsync(message);
            _logger.LogInformation("Email sent. User needs to check for new emails");

            return RedirectToAction("SuccessRegistration", "Account");
        }

        _logger.LogError("Sign up: " + result);

        return View("SignUp", model);
    }
    
    [HttpGet]
    public async Task<IActionResult> ConfirmEmail(string token, string email)
    {
        _logger.LogInformation("Email confirmed");
        var user = await _signInManager.UserManager.FindByEmailAsync(email);
        if (user == null)
        {
            _logger.LogInformation("User is null");
            return View("Error");
        }

        _logger.LogInformation("User is found by email");
        var result = await _signInManager.UserManager.ConfirmEmailAsync(user, token);
        return View(result.Succeeded ? "ConfirmEmail" : "Error");
    }

    [HttpGet]
    public IActionResult SuccessRegistration()
    {
        return View();
    }

    [HttpGet]
    public IActionResult ForgotPassword()
    {
        return View();
    }

    [HttpPost]
    public async Task<IActionResult> ForgotPassword(ForgotPasswordViewModel forgotPasswordViewModel)
    {
        if (!ModelState.IsValid)
        {
            _logger.LogInformation("ModelState is not valid in Forget Password.");
            return View(forgotPasswordViewModel);
        }

        var user = await _signInManager.UserManager.FindByEmailAsync(forgotPasswordViewModel.Email);
        if (user == null)
        {
            _logger.LogInformation("No user with such email has been signed up.");
            return RedirectToAction(nameof(ForgotPasswordConfirmation));
        }

        var token = await _signInManager.UserManager.GeneratePasswordResetTokenAsync(user);
        var callback = Url.Action(nameof(ResetPassword), "Account", new { token, email = user.Email }, Request.Scheme);
        var message = new Message(new string[] { user.Email }, "Reset password token", callback, null);
        await _emailSender.SendEmailAsync(message);

        return RedirectToAction(nameof(ForgotPasswordConfirmation));
    }

    public IActionResult ForgotPasswordConfirmation()
    {
        return View();
    }

    [HttpGet]
    public IActionResult ResetPassword(string token, string email)
    {
        var model = new ResetPasswordViewModel { Token = token, Email = email };
        return View(model);
    }

    [HttpPost]
    public async Task<IActionResult> ResetPassword(ResetPasswordViewModel resetPasswordModel)
    {
        if (!ModelState.IsValid)
        {
            _logger.LogInformation("ModelState is not valid while Reset Password.");
            return View(resetPasswordModel);
        }

        var user = await _signInManager.UserManager.FindByEmailAsync(resetPasswordModel.Email);
        if (user == null)
        {
            _logger.LogInformation("No user with such email has been signed up. Not able to reset password.");
            return RedirectToAction(nameof(ResetPasswordConfirmation));
        }

        var resetPassResult =
            await _signInManager.UserManager.ResetPasswordAsync(user, resetPasswordModel.Token,
                resetPasswordModel.Password);
        if (!resetPassResult.Succeeded)
        {
            foreach (var error in resetPassResult.Errors)
            {
                _logger.LogError(error.Code + " : " + error.Description);
                ModelState.TryAddModelError(error.Code, error.Description);
            }

            return View();
        }

        return RedirectToAction(nameof(ResetPasswordConfirmation));
    }

    [HttpGet]
    public IActionResult ResetPasswordConfirmation()
    {
        return View();
    }

    public async Task<IActionResult> UserSignOut()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        if (HttpContext.Request.Cookies.Count <= 0) RedirectToAction("Index", "Home");

        var siteCookies = HttpContext.Request.Cookies
            .Where(c => c.Key.Contains(".AspNetCore.") || c.Key.Contains("Microsoft.Authentication"));

        foreach (var cookie in siteCookies)
        {
            Response.Cookies.Delete(cookie.Key);
        }

        return RedirectToAction("Index", "Home");
    }
}